// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: healthdata.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum HealthTypes: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case workoutMain // = 0
  case categorySleepAnalysis // = 1
  case categoryAppleStandHour // = 2
  case categoryCervicalMucusQuality // = 3
  case quantityBodyMassIndex // = 4
  case quantityBodyFatPercentage // = 5
  case quantityHeight // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .workoutMain
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .workoutMain
    case 1: self = .categorySleepAnalysis
    case 2: self = .categoryAppleStandHour
    case 3: self = .categoryCervicalMucusQuality
    case 4: self = .quantityBodyMassIndex
    case 5: self = .quantityBodyFatPercentage
    case 6: self = .quantityHeight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .workoutMain: return 0
    case .categorySleepAnalysis: return 1
    case .categoryAppleStandHour: return 2
    case .categoryCervicalMucusQuality: return 3
    case .quantityBodyMassIndex: return 4
    case .quantityBodyFatPercentage: return 5
    case .quantityHeight: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension HealthTypes: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [HealthTypes] = [
    .workoutMain,
    .categorySleepAnalysis,
    .categoryAppleStandHour,
    .categoryCervicalMucusQuality,
    .quantityBodyMassIndex,
    .quantityBodyFatPercentage,
    .quantityHeight,
  ]
}

#endif  // swift(>=4.2)

struct HealthTypeList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var types: [HealthTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct HealthDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: HealthTypes = .workoutMain

  var startDate: String = String()

  var endDate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct HealthDataRequestList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requests: [HealthDataRequest] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct HealthData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sampleType: String = String()

  var startDate: String = String()

  var endDate: String = String()

  var device: String = String()

  var metadata: String = String()

  var count: Int64 = 0

  var quantityUnit: String = String()

  var quantity: Double = 0

  var value: Int64 = 0

  var totalEnergyBurned: Double = 0

  var totalEnergyBurnedUnit: String = String()

  var totalDistance: Double = 0

  var totalDistanceUnit: String = String()

  var duration: Double = 0

  var type: HealthTypes = .workoutMain

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct HealthDataList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [HealthData] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension HealthTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORKOUT_MAIN"),
    1: .same(proto: "CATEGORY_SLEEP_ANALYSIS"),
    2: .same(proto: "CATEGORY_APPLE_STAND_HOUR"),
    3: .same(proto: "CATEGORY_CervicalMucusQuality"),
    4: .same(proto: "QUANTITY_BodyMassIndex"),
    5: .same(proto: "QUANTITY_BodyFatPercentage"),
    6: .same(proto: "QUANTITY_HEIGHT"),
  ]
}

extension HealthTypeList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthTypeList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "types"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.types)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.types.isEmpty {
      try visitor.visitPackedEnumField(value: self.types, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthTypeList, rhs: HealthTypeList) -> Bool {
    if lhs.types != rhs.types {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "startDate"),
    3: .same(proto: "endDate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.startDate)
      case 3: try decoder.decodeSingularStringField(value: &self.endDate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .workoutMain {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 2)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthDataRequest, rhs: HealthDataRequest) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthDataRequestList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthDataRequestList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requests"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.requests)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthDataRequestList, rhs: HealthDataRequestList) -> Bool {
    if lhs.requests != rhs.requests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sampleType"),
    2: .same(proto: "startDate"),
    3: .same(proto: "endDate"),
    4: .same(proto: "device"),
    5: .same(proto: "metadata"),
    6: .same(proto: "count"),
    7: .same(proto: "quantityUnit"),
    8: .same(proto: "quantity"),
    9: .same(proto: "value"),
    10: .same(proto: "totalEnergyBurned"),
    11: .same(proto: "totalEnergyBurnedUnit"),
    12: .same(proto: "totalDistance"),
    13: .same(proto: "totalDistanceUnit"),
    14: .same(proto: "duration"),
    15: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sampleType)
      case 2: try decoder.decodeSingularStringField(value: &self.startDate)
      case 3: try decoder.decodeSingularStringField(value: &self.endDate)
      case 4: try decoder.decodeSingularStringField(value: &self.device)
      case 5: try decoder.decodeSingularStringField(value: &self.metadata)
      case 6: try decoder.decodeSingularInt64Field(value: &self.count)
      case 7: try decoder.decodeSingularStringField(value: &self.quantityUnit)
      case 8: try decoder.decodeSingularDoubleField(value: &self.quantity)
      case 9: try decoder.decodeSingularInt64Field(value: &self.value)
      case 10: try decoder.decodeSingularDoubleField(value: &self.totalEnergyBurned)
      case 11: try decoder.decodeSingularStringField(value: &self.totalEnergyBurnedUnit)
      case 12: try decoder.decodeSingularDoubleField(value: &self.totalDistance)
      case 13: try decoder.decodeSingularStringField(value: &self.totalDistanceUnit)
      case 14: try decoder.decodeSingularDoubleField(value: &self.duration)
      case 15: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sampleType.isEmpty {
      try visitor.visitSingularStringField(value: self.sampleType, fieldNumber: 1)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 2)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 3)
    }
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 4)
    }
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 5)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 6)
    }
    if !self.quantityUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.quantityUnit, fieldNumber: 7)
    }
    if self.quantity != 0 {
      try visitor.visitSingularDoubleField(value: self.quantity, fieldNumber: 8)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 9)
    }
    if self.totalEnergyBurned != 0 {
      try visitor.visitSingularDoubleField(value: self.totalEnergyBurned, fieldNumber: 10)
    }
    if !self.totalEnergyBurnedUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.totalEnergyBurnedUnit, fieldNumber: 11)
    }
    if self.totalDistance != 0 {
      try visitor.visitSingularDoubleField(value: self.totalDistance, fieldNumber: 12)
    }
    if !self.totalDistanceUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.totalDistanceUnit, fieldNumber: 13)
    }
    if self.duration != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 14)
    }
    if self.type != .workoutMain {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthData, rhs: HealthData) -> Bool {
    if lhs.sampleType != rhs.sampleType {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.device != rhs.device {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.count != rhs.count {return false}
    if lhs.quantityUnit != rhs.quantityUnit {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.value != rhs.value {return false}
    if lhs.totalEnergyBurned != rhs.totalEnergyBurned {return false}
    if lhs.totalEnergyBurnedUnit != rhs.totalEnergyBurnedUnit {return false}
    if lhs.totalDistance != rhs.totalDistance {return false}
    if lhs.totalDistanceUnit != rhs.totalDistanceUnit {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthDataList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthDataList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthDataList, rhs: HealthDataList) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
